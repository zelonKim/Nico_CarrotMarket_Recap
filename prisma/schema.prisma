generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "sqlite" // 사용할 DB의 종류
  url      = env("DATABASE_URL") // 사용할 DB의 위치
}

// npx prisma migrate dev 명령어 -> 프리즈마 스키마를 실제 데이터베이스에 반영함.

// npx prisma studio 명령어 -> 프리즈마 스튜디오(DMBS)에 접속함.

model User {
  id         Int        @id @default(autoincrement()) // 자동으로 1씩 증가되는 기본값을 설정함.
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?    @default("http://")
  created_at DateTime   @default(now()) // 현재 시간을 기본값으로 설정함.
  updated_at DateTime   @updatedAt //업데이트된 시간을 설정함.
  tokens     SMSToken[]
  products   Product[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId Int // 실제 DB에 저장되는 컬럼
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId Int
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  views       Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comments Comment[]
  likes    Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId Int
  postId Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id String @id @default(cuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users    User[]
  messages Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room ChatRoom @relation(fields: [chatRoomId], references: [id])
  user User     @relation(fields: [userId], references: [id])

  chatRoomId String
  userId     Int
}
